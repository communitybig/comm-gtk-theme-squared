#!/bin/bash

# Installation file for Arch Linux packages - Squared Theme for i3wm

# Global variables
THEME_NAME="Squared"
THEMES_DIR="/usr/share/themes/$THEME_NAME"

# Function to backup Rofi configuration
backup_rofi_config() {
    local user="$1"
    local user_home="$2"
    local timestamp=$(date +%Y%m%d%H%M%S)
    local backup_dir="$user_home/backup_customizations"
    local rofi_config_dir="$user_home/.config/rofi"
    
    echo "Criando backup das configurações do Rofi..."
    
    # Create backup directory if it doesn't exist
    mkdir -p "$backup_dir"
    chown "$user:$user" "$backup_dir"
    
    # Backup Rofi configuration files
    if [ -d "$rofi_config_dir" ]; then
        tar -czf "$backup_dir/rofi-$timestamp.tar.gz" -C "$(dirname "$rofi_config_dir")" "$(basename "$rofi_config_dir")"
        echo "Backup do Rofi criado: rofi-$timestamp.tar.gz"
    else
        echo "Nenhuma configuração do Rofi encontrada para backup."
    fi
    
    # Set ownership for backup files
    chown -R "$user:$user" "$backup_dir"
    
    return 0
}

# Function to apply Squared theme colors to Rofi
apply_theme_to_rofi() {
    local user="$1"
    local user_home="$2"
    local rofi_config_dir="$user_home/.config/rofi"
    
    echo "Aplicando cores do tema $THEME_NAME ao Rofi..."
    
    # Create Rofi config directory if it doesn't exist
    mkdir -p "$rofi_config_dir"
    
    # Define theme colors based on Squared theme
    # Estas cores precisam ser ajustadas de acordo com as cores reais do tema Squared
    local bg_color="#101819"
    local text_color="#f0f0f0"
    local accent_color="#617a78"  # Cor do tema Squared
    local border_color="#617a78"
    
    # Create Rofi theme file
    cat > "$rofi_config_dir/$THEME_NAME.rasi" << EOF
/* Rofi theme for $THEME_NAME */
* {
    background-color:   $bg_color;
    text-color:         $text_color;
    
    accent-color:       $accent_color;
    border-color:       $border_color;
}

window {
    location:   center;
    width:      480;

}

inputbar {
    spacing:    8px;
    padding:    8px;

}

prompt, entry, element-icon, element-text {
    vertical-align: 0.5;
}

prompt {
    text-color: @accent-color;
}

textbox {
    padding:            8px;

}

listview {
    padding:    4px 0;
    lines:      8;
    columns:    1;

    fixed-height:   false;
}

element {
    padding:    8px;
    spacing:    8px;
}

element normal normal {

}

element normal urgent {
    text-color: @accent-color;
}

element normal active {
    text-color: @accent-color;
}

element alternate active {
    text-color: @accent-color;
}

element selected {

}

element selected normal, element selected active {
    background-color:   @accent-color;
}

element selected urgent {
    background-color:   @accent-color;
}

element-icon {
    size:   0.8em;
}

element-text {
    text-color: inherit;
}

message {
    padding:          10px;
    border-radius:    4px;
    border:           1px;
    border-color:     @border-color;
}
EOF

    # Create or update Rofi configuration to use this theme
    mkdir -p "$rofi_config_dir"
    
    # Check if config.rasi exists
    if [ ! -f "$rofi_config_dir/config.rasi" ]; then
        # Create new config
        cat > "$rofi_config_dir/config.rasi" << EOF
configuration {
    modi: "drun,run,window";
    font: "Noto Sans 11";
    show-icons: true;
    icon-theme: "Papirus";
    drun-display-format: "{name}";
    disable-history: false;
    sidebar-mode: false;
}

@theme "$THEME_NAME"
EOF
    else
        # Update existing config
        # First, make a backup of original config
        cp "$rofi_config_dir/config.rasi" "$rofi_config_dir/config.rasi.bak.${THEME_NAME}"
        
        # Check if theme line exists
        if grep -q "@theme" "$rofi_config_dir/config.rasi"; then
            # Update theme line
            sed -i "s|@theme.*|@theme \"$THEME_NAME\"|" "$rofi_config_dir/config.rasi"
        else
            # Add theme line at the end
            echo -e "\n@theme \"$THEME_NAME\"" >> "$rofi_config_dir/config.rasi"
        fi
    fi
    
    # Set correct ownership
    chown -R "$user:$user" "$rofi_config_dir"
    
    echo "Tema Rofi $THEME_NAME aplicado com sucesso!"
    return 0
}

# Function to restore original Rofi configuration
restore_rofi_config() {
    local user="$1"
    local user_home="$2"
    local backup_dir="$user_home/backup_customizations"
    local rofi_config_dir="$user_home/.config/rofi"
    
    echo "Restaurando configuração original do Rofi..."
    
    # Check if backup exists
    if [ -d "$backup_dir" ]; then
        # Find latest Rofi backup
        latest_rofi=$(ls -t "$backup_dir"/rofi-*.tar.gz 2>/dev/null | head -1)
        
        if [ -n "$latest_rofi" ]; then
            # Remove current Rofi config
            if [ -d "$rofi_config_dir" ]; then
                rm -rf "$rofi_config_dir"
                echo "Removida configuração atual do Rofi."
            fi
            
            # Restore from backup
            echo "Restaurando $latest_rofi..."
            mkdir -p "$user_home/.config"
            tar -xzf "$latest_rofi" -C "$user_home/.config/"
            chown -R "$user:$user" "$rofi_config_dir"
            echo "Configuração original do Rofi restaurada."
        elif [ -f "$rofi_config_dir/config.rasi.bak.${THEME_NAME}" ]; then
            # If we have a backup of just the config file, restore it
            cp "$rofi_config_dir/config.rasi.bak.${THEME_NAME}" "$rofi_config_dir/config.rasi"
            rm -f "$rofi_config_dir/config.rasi.bak.${THEME_NAME}"
            rm -f "$rofi_config_dir/$THEME_NAME.rasi"
            echo "Configuração original do Rofi restaurada a partir do backup local."
        else
            echo "Nenhum backup do Rofi encontrado."
        fi
    else
        echo "Diretório de backup não encontrado. Não foi possível restaurar a configuração do Rofi."
    fi
    
    return 0
}

# Function to backup wallpaper settings for i3
backup_wallpaper() {
    local user="$1"
    local user_home="$2"
    local wallpaper_backup="$user_home/.config/${THEME_NAME}-wallpaper-backup.txt"
    
    echo "Salvando configuração atual do wallpaper para i3..."
    
    # For i3, check for feh, nitrogen, or other wallpaper managers
    if [ -f "$user_home/.fehbg" ]; then
        cp "$user_home/.fehbg" "$wallpaper_backup"
        echo "Backup do feh wallpaper realizado."
    elif [ -f "$user_home/.config/nitrogen/bg-saved.cfg" ]; then
        cp "$user_home/.config/nitrogen/bg-saved.cfg" "$wallpaper_backup"
        echo "Backup do nitrogen wallpaper realizado."
    elif [ -f "$user_home/.config/i3/config" ]; then
        # Try to extract wallpaper command from i3 config
        grep -E "exec.*feh|exec.*nitrogen" "$user_home/.config/i3/config" > "$wallpaper_backup" || true
        if [ -s "$wallpaper_backup" ]; then
            echo "Extraído comando de wallpaper do config do i3."
        else
            echo "Nenhum comando de wallpaper encontrado no config do i3."
            rm -f "$wallpaper_backup"
        fi
    else
        echo "Nenhuma configuração de wallpaper encontrada para backup."
        return 1
    fi
    
    if [ -f "$wallpaper_backup" ]; then
        chown "$user:$user" "$wallpaper_backup" 2>/dev/null
        echo "Backup do wallpaper criado em $wallpaper_backup"
    fi
    
    return 0
}

# Function to backup current GTK settings
backup_gtk_settings() {
    local user="$1"
    local user_home="$2"
    local timestamp=$(date +%Y%m%d%H%M%S)
    local backup_dir="$user_home/backup_customizations"
    
    echo "Criando backup das configurações GTK para i3..."
    
    # Create backup directory if it doesn't exist
    mkdir -p "$backup_dir"
    chown "$user:$user" "$backup_dir"
    
    # Backup GTK configuration files
    GTK4_DIR="$user_home/.config/gtk-4.0"
    GTK3_DIR="$user_home/.config/gtk-3.0"
    GTK2_FILE="$user_home/.gtkrc-2.0"
    GTK2_DIR="$user_home/.gtk-2.0"
    
    for dir in "$GTK4_DIR" "$GTK3_DIR" "$GTK2_DIR"; do
        if [ -d "$dir" ]; then
            tar -czf "$backup_dir/$(basename "$dir")-$timestamp.tar.gz" -C "$(dirname "$dir")" "$(basename "$dir")"
            echo "Backup criado: $(basename "$dir")-$timestamp.tar.gz"
        fi
    done
    
    if [ -f "$GTK2_FILE" ]; then
        cp "$GTK2_FILE" "$backup_dir/gtkrc-2.0-$timestamp.bak"
        echo "Backup criado: gtkrc-2.0-$timestamp.bak"
    fi
    
    # Backup i3-specific theme settings if any
    if [ -f "$user_home/.config/gtk-3.0/settings.ini" ]; then
        cp "$user_home/.config/gtk-3.0/settings.ini" "$backup_dir/gtk3-settings-$timestamp.bak"
        echo "Backup das configurações GTK3 criado."
    fi
    
    if [ -f "$user_home/.config/gtk-4.0/settings.ini" ]; then
        cp "$user_home/.config/gtk-4.0/settings.ini" "$backup_dir/gtk4-settings-$timestamp.bak"
        echo "Backup das configurações GTK4 criado."
    fi
    
    # Backup XFCE settings if exist
    xfce_config_dir="$user_home/.config/xfce4/xfconf/xfce-perchannel-xml"
    if [ -d "$xfce_config_dir" ]; then
        mkdir -p "$backup_dir/xfce4"
        for file in "$xfce_config_dir"/*.xml; do
            if [ -f "$file" ]; then
                cp "$file" "$backup_dir/xfce4/$(basename "$file").$timestamp.bak"
                echo "Backup do arquivo XFCE $(basename "$file") criado."
            fi
        done
    fi
    
    # Set ownership for backup files
    chown -R "$user:$user" "$backup_dir"
    
    return 0
}

# Function executed before package installation
pre_install() {
    echo "Preparando para instalar o tema Squared para i3wm..."
}

# Function executed after package installation
post_install() {
    echo "Aplicando tema Squared para GTK no i3wm..."

    # Get user information
    user=$(logname)
    user_home=$(getent passwd "$user" | cut -d: -f6)

    if [ -z "$user_home" ]; then
        echo "Não foi possível determinar o diretório home para o usuário $user. Pulando aplicação do tema."
        return 1
    fi

    # Backup wallpaper settings first
    backup_wallpaper "$user" "$user_home"
    
    # Backup current GTK settings
    backup_gtk_settings "$user" "$user_home"
    
    # Backup Rofi configuration
    backup_rofi_config "$user" "$user_home"

    # Directories
    GTK4_DIR="$user_home/.config/gtk-4.0"
    GTK3_DIR="$user_home/.config/gtk-3.0"
    GTK2_FILE="$user_home/.gtkrc-2.0"

    # Create directories if they don't exist
    for dir in "$GTK4_DIR" "$GTK3_DIR"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            chown "$user:$user" "$dir"
        fi
    done
    
    # APENAS copiar os arquivos que são seguros
    # Evitar sobrescrever arquivos que afetam o terminal (colors.css, gtk.css, etc.)
    echo "Configurando tema $THEME_NAME para aplicações GTK..."

    # Setup GTK2 if available (isso é seguro, só afeta aplicações GTK2)
    if [ -f "$THEMES_DIR/gtk-2.0/gtkrc" ]; then
        echo "include \"$THEMES_DIR/gtk-2.0/gtkrc\"" > "$GTK2_FILE"
        echo "gtk-theme-name=\"$THEME_NAME\"" >> "$GTK2_FILE"
        chown "$user:$user" "$GTK2_FILE"
    fi

    # Update GTK3 settings.ini - apenas mudar o nome do tema
    if [ ! -f "$GTK3_DIR/settings.ini" ]; then
        # Create new settings.ini
        mkdir -p "$GTK3_DIR"
        echo "[Settings]" > "$GTK3_DIR/settings.ini"
        echo "gtk-theme-name=$THEME_NAME" >> "$GTK3_DIR/settings.ini"
        echo "gtk-application-prefer-dark-theme=1" >> "$GTK3_DIR/settings.ini"
    else
        # Backup the existing settings.ini
        cp "$GTK3_DIR/settings.ini" "$GTK3_DIR/settings.ini.bak.$THEME_NAME"
        
        # Update only theme name
        if grep -q "^gtk-theme-name" "$GTK3_DIR/settings.ini"; then
            sed -i "s/^gtk-theme-name=.*/gtk-theme-name=$THEME_NAME/" "$GTK3_DIR/settings.ini"
        else
            echo "gtk-theme-name=$THEME_NAME" >> "$GTK3_DIR/settings.ini"
        fi
        
        # Update only dark mode preference if needed
        if grep -q "^gtk-application-prefer-dark-theme" "$GTK3_DIR/settings.ini"; then
            sed -i "s/^gtk-application-prefer-dark-theme=.*/gtk-application-prefer-dark-theme=1/" "$GTK3_DIR/settings.ini"
        else
            echo "gtk-application-prefer-dark-theme=1" >> "$GTK3_DIR/settings.ini"
        fi
    fi
    chown -R "$user:$user" "$GTK3_DIR/settings.ini"

    # Update GTK4 settings.ini - apenas mudar o nome do tema
    if [ ! -f "$GTK4_DIR/settings.ini" ]; then
        # Create new settings.ini
        mkdir -p "$GTK4_DIR"
        echo "[Settings]" > "$GTK4_DIR/settings.ini"
        echo "gtk-theme-name=$THEME_NAME" >> "$GTK4_DIR/settings.ini"
        echo "gtk-application-prefer-dark-theme=1" >> "$GTK4_DIR/settings.ini"
    else
        # Backup the existing settings.ini
        cp "$GTK4_DIR/settings.ini" "$GTK4_DIR/settings.ini.bak.$THEME_NAME"
        
        # Update only theme name
        if grep -q "^gtk-theme-name" "$GTK4_DIR/settings.ini"; then
            sed -i "s/^gtk-theme-name=.*/gtk-theme-name=$THEME_NAME/" "$GTK4_DIR/settings.ini"
        else
            echo "gtk-theme-name=$THEME_NAME" >> "$GTK4_DIR/settings.ini"
        fi
        
        # Update only dark mode preference if needed
        if grep -q "^gtk-application-prefer-dark-theme" "$GTK4_DIR/settings.ini"; then
            sed -i "s/^gtk-application-prefer-dark-theme=.*/gtk-application-prefer-dark-theme=1/" "$GTK4_DIR/settings.ini"
        else
            echo "gtk-application-prefer-dark-theme=1" >> "$GTK4_DIR/settings.ini"
        fi
    fi
    chown -R "$user:$user" "$GTK4_DIR/settings.ini"

    # Configure XFCE4/Thunar specifically - crucial for Thunar
    echo "Configurando XFCE/Thunar para usar o tema $THEME_NAME..."
    xfce_dir="$user_home/.config/xfce4/xfconf/xfce-perchannel-xml"
    
    # Check if Thunar or XFCE is installed/configured
    if command -v thunar > /dev/null 2>&1 || pgrep xfce4-session > /dev/null || [ -d "$user_home/.config/xfce4" ]; then
        mkdir -p "$xfce_dir"
        
        # Update xsettings.xml for XFCE theme
        xsettings_file="$xfce_dir/xsettings.xml"
        if [ -f "$xsettings_file" ]; then
            # Make backup of original
            cp "$xsettings_file" "$xsettings_file.bak.$THEME_NAME"
            
            # Update theme name in the file
            if grep -q '<property name="ThemeName"' "$xsettings_file"; then
                sed -i 's|<property name="ThemeName".*|<property name="ThemeName" type="string" value="'"$THEME_NAME"'"/>|' "$xsettings_file"
            else
                # If we have Net property but no ThemeName
                if grep -q '<property name="Net"' "$xsettings_file"; then
                    sed -i '/<property name="Net"/a \    <property name="ThemeName" type="string" value="'"$THEME_NAME"'"/>' "$xsettings_file"
                else
                    # Add Net property and ThemeName
                    sed -i 's|</channel>|  <property name="Net" type="empty">\n    <property name="ThemeName" type="string" value="'"$THEME_NAME"'"/>\n  </property>\n</channel>|' "$xsettings_file"
                fi
            fi
        else
            # Create new xsettings.xml
            cat > "$xsettings_file" << EOF
<?xml version="1.0" encoding="UTF-8"?>

<channel name="xsettings" version="1.0">
  <property name="Net" type="empty">
    <property name="ThemeName" type="string" value="$THEME_NAME"/>
  </property>
</channel>
EOF
        fi
        
        # Set ownership for XFCE configs
        chown -R "$user:$user" "$xfce_dir"
        
        # Attempt to update directly via xfconf-query if available
        if command -v xfconf-query > /dev/null 2>&1; then
            su - "$user" -c "export DISPLAY=:0; xfconf-query -c xsettings -p /Net/ThemeName -s \"$THEME_NAME\" 2>/dev/null" || true
        fi
        
        # Restart Thunar if it's running
        if pgrep thunar > /dev/null; then
            echo "Reiniciando o Thunar para aplicar o tema..."
            pkill -u "$user" thunar
            sleep 1
            su - "$user" -c "export DISPLAY=:0; thunar --daemon &>/dev/null &" || true
        fi
    fi
    
    # Create symbolic link in user's .config directory pointing to assets if needed
    if [ -d "$THEMES_DIR/assets" ]; then
        echo "Criando link simbólico para assets em $user_home/.config..."
        ln -sf "$THEMES_DIR/assets" "$user_home/.config/assets"
        chown -h "$user:$user" "$user_home/.config/assets"
    fi

    # Restore wallpaper - this will ensure it's preserved
    local wallpaper_backup="$user_home/.config/${THEME_NAME}-wallpaper-backup.txt"
    if [ -f "$wallpaper_backup" ]; then
        if grep -q "feh" "$wallpaper_backup"; then
            # It's a feh backup
            cp "$wallpaper_backup" "$user_home/.fehbg"
            chmod +x "$user_home/.fehbg"
            echo "Restaurando wallpaper do feh..."
            su - "$user" -c "export DISPLAY=:0; $user_home/.fehbg &" || true
        elif grep -q "nitrogen" "$wallpaper_backup"; then
            # It's a nitrogen backup
            mkdir -p "$user_home/.config/nitrogen"
            cp "$wallpaper_backup" "$user_home/.config/nitrogen/bg-saved.cfg"
            echo "Restaurando wallpaper do nitrogen..."
            su - "$user" -c "export DISPLAY=:0; command -v nitrogen >/dev/null 2>&1 && nitrogen --restore &" || true
        elif grep -q "exec" "$wallpaper_backup"; then
            # It's an i3 command
            echo "Encontrado comando de wallpaper no config do i3. Mantenha-o em seu config."
        else
            echo "Formato de backup de wallpaper não reconhecido."
        fi
        # Keep the backup for uninstall
        chown "$user:$user" "$wallpaper_backup" 2>/dev/null
    else
        echo "Nenhum backup de wallpaper encontrado. O wallpaper atual será mantido."
    fi
    
    # Apply theme to Rofi
    apply_theme_to_rofi "$user" "$user_home"

    # Apply theme globally via gsettings
    if command -v gsettings > /dev/null 2>&1; then
        echo "Aplicando tema via gsettings..."
        su - "$user" -c "export DISPLAY=:0; gsettings set org.gnome.desktop.interface gtk-theme '$THEME_NAME'" || true
    fi

    echo "Tema Squared aplicado com sucesso para i3wm, Thunar e Rofi! O wallpaper original foi preservado."
    return 0
}

# Function executed before package removal
pre_remove() {
    echo "Preparando para remover o tema Squared do i3wm..."
}

# Function executed after package removal
post_remove() {
    echo "Restaurando configurações padrão e removendo arquivos do tema Squared..."

    # Get user information
    user=$(logname)
    user_home=$(getent passwd "$user" | cut -d: -f6)
    backup_dir="$user_home/backup_customizations"
    
    # Verify if user's home directory exists
    if [ -z "$user_home" ]; then
        echo "Não foi possível determinar o diretório home para o usuário $user. Pulando restauração."
        return 1
    fi

    # GTK directories and files
    GTK4_DIR="$user_home/.config/gtk-4.0"
    GTK3_DIR="$user_home/.config/gtk-3.0"
    GTK2_FILE="$user_home/.gtkrc-2.0"
    
    # Restore backups
    echo "Restaurando diretórios GTK a partir de backups..."
    if [ -d "$backup_dir" ]; then
        # Find the latest backups
        latest_gtk4=$(ls -t "$backup_dir"/gtk-4.0-*.tar.gz 2>/dev/null | head -1)
        latest_gtk3=$(ls -t "$backup_dir"/gtk-3.0-*.tar.gz 2>/dev/null | head -1)
        latest_gtk2=$(ls -t "$backup_dir"/gtkrc-2.0-*.bak 2>/dev/null | head -1)
        latest_gtk3_settings=$(ls -t "$backup_dir"/gtk3-settings-*.bak 2>/dev/null | head -1)
        latest_gtk4_settings=$(ls -t "$backup_dir"/gtk4-settings-*.bak 2>/dev/null | head -1)
        
        # Restore settings.ini files
        if [ -f "$GTK3_DIR/settings.ini.bak.$THEME_NAME" ]; then
            cp "$GTK3_DIR/settings.ini.bak.$THEME_NAME" "$GTK3_DIR/settings.ini"
            rm "$GTK3_DIR/settings.ini.bak.$THEME_NAME"
        elif [ -n "$latest_gtk3_settings" ]; then
            mkdir -p "$GTK3_DIR"
            cp "$latest_gtk3_settings" "$GTK3_DIR/settings.ini"
        fi
        
        if [ -f "$GTK4_DIR/settings.ini.bak.$THEME_NAME" ]; then
            cp "$GTK4_DIR/settings.ini.bak.$THEME_NAME" "$GTK4_DIR/settings.ini"
            rm "$GTK4_DIR/settings.ini.bak.$THEME_NAME"
        elif [ -n "$latest_gtk4_settings" ]; then
            mkdir -p "$GTK4_DIR"
            cp "$latest_gtk4_settings" "$GTK4_DIR/settings.ini"
        fi
        
        # Restore GTK2 file
        if [ -n "$latest_gtk2" ]; then
            echo "Restaurando $latest_gtk2..."
            cp "$latest_gtk2" "$GTK2_FILE"
            chown "$user:$user" "$GTK2_FILE"
        elif [ -f "$GTK2_FILE" ] && grep -q "$THEME_NAME" "$GTK2_FILE"; then
            # Remove our GTK2 file if it's our theme
            rm -f "$GTK2_FILE"
            echo "Removido: $GTK2_FILE"
        fi
        
        # Restore XFCE settings
        xfce_dir="$user_home/.config/xfce4/xfconf/xfce-perchannel-xml"
        if [ -d "$xfce_dir" ]; then
            xsettings_file="$xfce_dir/xsettings.xml"
            if [ -f "$xsettings_file.bak.$THEME_NAME" ]; then
                echo "Restaurando configurações do XFCE..."
                cp "$xsettings_file.bak.$THEME_NAME" "$xsettings_file"
                rm "$xsettings_file.bak.$THEME_NAME"
                
                # Set the correct permissions
                chown "$user:$user" "$xsettings_file"
            elif [ -d "$backup_dir/xfce4" ]; then
                # Check for backups in our backup directory
                latest_xsettings=$(ls -t "$backup_dir"/xfce4/xsettings.xml.*.bak 2>/dev/null | head -1)
                if [ -n "$latest_xsettings" ]; then
                    cp "$latest_xsettings" "$xsettings_file"
                    chown "$user:$user" "$xsettings_file"
                fi
            fi
            
            # Update via xfconf-query if possible
            if command -v xfconf-query > /dev/null 2>&1; then
                su - "$user" -c "export DISPLAY=:0; xfconf-query -c xsettings -p /Net/ThemeName -s \"Adwaita\" 2>/dev/null" || true
            fi
            
            # Restart Thunar if running
            if pgrep thunar > /dev/null; then
                echo "Reiniciando o Thunar para aplicar as configurações restauradas..."
                pkill -u "$user" thunar
                sleep 1
                su - "$user" -c "export DISPLAY=:0; thunar --daemon &>/dev/null &" || true
            fi
        fi
        
        # Restore wallpaper
        local wallpaper_backup="$user_home/.config/${THEME_NAME}-wallpaper-backup.txt"
        if [ -f "$wallpaper_backup" ]; then
            if grep -q "feh" "$wallpaper_backup"; then
                # It's a feh backup
                cp "$wallpaper_backup" "$user_home/.fehbg"
                chmod +x "$user_home/.fehbg"
                echo "Restaurando wallpaper do feh..."
                su - "$user" -c "export DISPLAY=:0; $user_home/.fehbg &" || true
            elif grep -q "nitrogen" "$wallpaper_backup"; then
                # It's a nitrogen backup
                mkdir -p "$user_home/.config/nitrogen"
                cp "$wallpaper_backup" "$user_home/.config/nitrogen/bg-saved.cfg"
                echo "Restaurando wallpaper do nitrogen..."
                su - "$user" -c "export DISPLAY=:0; command -v nitrogen >/dev/null 2>&1 && nitrogen --restore &" || true
            fi
            # Remove the backup file
            rm -f "$wallpaper_backup"
        fi
        
        # Restore Rofi configuration
        restore_rofi_config "$user" "$user_home"
    else
        echo "Diretório de backup $backup_dir não encontrado. Pulando restauração."
    fi

    # Remove theme directory
    if [ -d "$THEMES_DIR" ]; then
        echo "Removendo diretório do tema: $THEMES_DIR"
        rm -rf "$THEMES_DIR"
    fi
    
    # Remove symbolic link assets
    if [ -L "$user_home/.config/assets" ]; then
        echo "Removendo link simbólico: $user_home/.config/assets"
        rm "$user_home/.config/assets"
    fi
    
    # Remove backup files
    if [ -d "$backup_dir" ]; then
        echo "Removendo diretório de backup: $backup_dir"
        rm -rf "$backup_dir"
    fi

    # Reset theme via gsettings
    if command -v gsettings > /dev/null 2>&1; then
        echo "Resetando tema via gsettings..."
        su - "$user" -c "export DISPLAY=:0; gsettings reset org.gnome.desktop.interface gtk-theme" || true
    fi

    echo "Configurações padrão restauradas e todos os arquivos do tema Squared foram removidos."
    return 0
}
